// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApi.Models;

namespace WebApi.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AcademicSupervisorEventRequest", b =>
                {
                    b.Property<int>("AcademicSupervisorsId")
                        .HasColumnType("int");

                    b.Property<int>("EventRequestsId")
                        .HasColumnType("int");

                    b.HasKey("AcademicSupervisorsId", "EventRequestsId");

                    b.HasIndex("EventRequestsId");

                    b.ToTable("AcademicSupervisorEventRequest");
                });

            modelBuilder.Entity("CompanyPartnership", b =>
                {
                    b.Property<int>("CompaniesId")
                        .HasColumnType("int");

                    b.Property<int>("PartnershipsId")
                        .HasColumnType("int");

                    b.HasKey("CompaniesId", "PartnershipsId");

                    b.HasIndex("PartnershipsId");

                    b.ToTable("CompanyPartnership");
                });

            modelBuilder.Entity("CompanyStuffEventRequest", b =>
                {
                    b.Property<int>("CompanyStuffsId")
                        .HasColumnType("int");

                    b.Property<int>("EventRequestsId")
                        .HasColumnType("int");

                    b.HasKey("CompanyStuffsId", "EventRequestsId");

                    b.HasIndex("EventRequestsId");

                    b.ToTable("CompanyStuffEventRequest");
                });

            modelBuilder.Entity("EmploymentStudent", b =>
                {
                    b.Property<int>("EmploymentsId")
                        .HasColumnType("int");

                    b.Property<int>("StudentsId")
                        .HasColumnType("int");

                    b.HasKey("EmploymentsId", "StudentsId");

                    b.HasIndex("StudentsId");

                    b.ToTable("EmploymentStudent");
                });

            modelBuilder.Entity("EventUniversity", b =>
                {
                    b.Property<int>("EventsId")
                        .HasColumnType("int");

                    b.Property<int>("UniversitiesId")
                        .HasColumnType("int");

                    b.HasKey("EventsId", "UniversitiesId");

                    b.HasIndex("UniversitiesId");

                    b.ToTable("EventUniversity");
                });

            modelBuilder.Entity("PartnershipUniversity", b =>
                {
                    b.Property<int>("PartnershipsId")
                        .HasColumnType("int");

                    b.Property<int>("UniversitiesId")
                        .HasColumnType("int");

                    b.HasKey("PartnershipsId", "UniversitiesId");

                    b.HasIndex("UniversitiesId");

                    b.ToTable("PartnershipUniversity");
                });

            modelBuilder.Entity("ResponseStudent", b =>
                {
                    b.Property<int>("ResponsesId")
                        .HasColumnType("int");

                    b.Property<int>("StudentsId")
                        .HasColumnType("int");

                    b.HasKey("ResponsesId", "StudentsId");

                    b.HasIndex("StudentsId");

                    b.ToTable("ResponseStudent");
                });

            modelBuilder.Entity("ResponseVacancy", b =>
                {
                    b.Property<int>("ResponsesId")
                        .HasColumnType("int");

                    b.Property<int>("VacanciesId")
                        .HasColumnType("int");

                    b.HasKey("ResponsesId", "VacanciesId");

                    b.HasIndex("VacanciesId");

                    b.ToTable("ResponseVacancy");
                });

            modelBuilder.Entity("WebApi.Models.AcademicSupervisor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telephone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThirdName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UniversityId")
                        .HasColumnType("int");

                    b.Property<string>("UserType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UniversityId");

                    b.ToTable("AcademicSupervisors");
                });

            modelBuilder.Entity("WebApi.Models.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmploymentId")
                        .HasColumnType("int");

                    b.Property<int?>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmploymentId");

                    b.HasIndex("EventId");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("WebApi.Models.CompanyStuff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telephone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThirdName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("CompanyStuff");
                });

            modelBuilder.Entity("WebApi.Models.Employment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("CompanyReview")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmploymentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<string>("StudentReview")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Employments");
                });

            modelBuilder.Entity("WebApi.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventReview")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkerDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("WebApi.Models.EventRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Happening")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RequestSendDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("WorkerDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EventRequests");
                });

            modelBuilder.Entity("WebApi.Models.Partnership", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("UniversityId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Partnerships");
                });

            modelBuilder.Entity("WebApi.Models.Response", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("RespondedSide")
                        .HasColumnType("bit");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("VacancyId")
                        .HasColumnType("int");

                    b.Property<bool>("toInterview")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Responses");
                });

            modelBuilder.Entity("WebApi.Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Faculty")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PortfolioURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResumeURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Speciality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telephone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThirdName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UniversityId")
                        .HasColumnType("int");

                    b.Property<string>("UserType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UniversityId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("WebApi.Models.University", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rating")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Universities");
                });

            modelBuilder.Entity("WebApi.Models.Vacancy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CompanyDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int?>("CompanyStuffId")
                        .HasColumnType("int");

                    b.Property<string>("Conditions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Requirements")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Responsibilities")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Salary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeOfEmployment")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CompanyStuffId");

                    b.ToTable("Vacancies");
                });

            modelBuilder.Entity("AcademicSupervisorEventRequest", b =>
                {
                    b.HasOne("WebApi.Models.AcademicSupervisor", null)
                        .WithMany()
                        .HasForeignKey("AcademicSupervisorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Models.EventRequest", null)
                        .WithMany()
                        .HasForeignKey("EventRequestsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CompanyPartnership", b =>
                {
                    b.HasOne("WebApi.Models.Company", null)
                        .WithMany()
                        .HasForeignKey("CompaniesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Models.Partnership", null)
                        .WithMany()
                        .HasForeignKey("PartnershipsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CompanyStuffEventRequest", b =>
                {
                    b.HasOne("WebApi.Models.CompanyStuff", null)
                        .WithMany()
                        .HasForeignKey("CompanyStuffsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Models.EventRequest", null)
                        .WithMany()
                        .HasForeignKey("EventRequestsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EmploymentStudent", b =>
                {
                    b.HasOne("WebApi.Models.Employment", null)
                        .WithMany()
                        .HasForeignKey("EmploymentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Models.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EventUniversity", b =>
                {
                    b.HasOne("WebApi.Models.Event", null)
                        .WithMany()
                        .HasForeignKey("EventsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Models.University", null)
                        .WithMany()
                        .HasForeignKey("UniversitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PartnershipUniversity", b =>
                {
                    b.HasOne("WebApi.Models.Partnership", null)
                        .WithMany()
                        .HasForeignKey("PartnershipsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Models.University", null)
                        .WithMany()
                        .HasForeignKey("UniversitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ResponseStudent", b =>
                {
                    b.HasOne("WebApi.Models.Response", null)
                        .WithMany()
                        .HasForeignKey("ResponsesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Models.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ResponseVacancy", b =>
                {
                    b.HasOne("WebApi.Models.Response", null)
                        .WithMany()
                        .HasForeignKey("ResponsesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Models.Vacancy", null)
                        .WithMany()
                        .HasForeignKey("VacanciesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApi.Models.AcademicSupervisor", b =>
                {
                    b.HasOne("WebApi.Models.University", null)
                        .WithMany("AcademicSupervisors")
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApi.Models.Company", b =>
                {
                    b.HasOne("WebApi.Models.Employment", null)
                        .WithMany("Companies")
                        .HasForeignKey("EmploymentId");

                    b.HasOne("WebApi.Models.Event", null)
                        .WithMany("Companies")
                        .HasForeignKey("EventId");
                });

            modelBuilder.Entity("WebApi.Models.CompanyStuff", b =>
                {
                    b.HasOne("WebApi.Models.Company", null)
                        .WithMany("CompanyStuffs")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApi.Models.Student", b =>
                {
                    b.HasOne("WebApi.Models.University", null)
                        .WithMany("Students")
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApi.Models.Vacancy", b =>
                {
                    b.HasOne("WebApi.Models.Company", null)
                        .WithMany("Vacancies")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Models.CompanyStuff", null)
                        .WithMany("Vacancies")
                        .HasForeignKey("CompanyStuffId");
                });

            modelBuilder.Entity("WebApi.Models.Company", b =>
                {
                    b.Navigation("CompanyStuffs");

                    b.Navigation("Vacancies");
                });

            modelBuilder.Entity("WebApi.Models.CompanyStuff", b =>
                {
                    b.Navigation("Vacancies");
                });

            modelBuilder.Entity("WebApi.Models.Employment", b =>
                {
                    b.Navigation("Companies");
                });

            modelBuilder.Entity("WebApi.Models.Event", b =>
                {
                    b.Navigation("Companies");
                });

            modelBuilder.Entity("WebApi.Models.University", b =>
                {
                    b.Navigation("AcademicSupervisors");

                    b.Navigation("Students");
                });
#pragma warning restore 612, 618
        }
    }
}
